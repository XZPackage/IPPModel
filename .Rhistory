ylab = "prediction", ylim = c(ymin, ymax), col = self$ColorList[1])
}else{
plot(x = XA, y = y, type = "l", xlab = fea, xaxt = "n",
ylab = "prediction", ylim = c(ymin, ymax), col = self$ColorList[1])
axis(1, labels = as.character(XA), at = as.numeric(XA))
}
y
y[,1]
if(bestK > 1){
y = IPPs[1,]
}else{
y = IPPs[,1]
}
if(self$ParaTable[fea,"dataType"] == "interval"){
plot(x = XA, y = y, type = "l", xlab = fea,
ylab = "prediction", ylim = c(ymin, ymax), col = self$ColorList[1])
}else{
plot(x = XA, y = y, type = "l", xlab = fea, xaxt = "n",
ylab = "prediction", ylim = c(ymin, ymax), col = self$ColorList[1])
axis(1, labels = as.character(XA), at = as.numeric(XA))
}
library(IPPModel)
IPP.iris = IPPModel$new(XDS=iris.ds, PredFun=iris.SVM,
ModelPackage="kernlab", PredType="prob", PredDim=1,
XB.Size=200, XB.SamplingMethod="independent")
# execute the tasks step by step
IPP.iris$SamplingXA()  # sampling XA
IPP.iris$SamplingXB()  # sampling XB
IPP.iris$PredictData()  # predict
IPP.iris$ClusterImpactPlots() # clustering impact plots
IPP.iris$BuildTree()  # build tree
IPP.iris$DrawIPP(centralized = TRUE, nc = 4)
IPP.iris$DrawFIN(threshold = 0.3, lay.out = igraph::layout.auto)
library(IPPModel)
library(IPPModel)
library(IPPModel)
library("IPPModel", lib.loc="~/R/win-library/3.4")
remove.packages("IPPModel", lib="~/R/win-library/3.4")
library(IPPModel)
x = IPPModel$new()
library(devtools)
install_github("xiaohang-zhang/IPPModel")
library(devtools)
install_github("xiaohang-zhang/IPPModel")
library(IPPModel)
library(igraph)
#------ FIRST EXAMPLE ------
library(nnet)
data("bank")
# build model
bank.NN <- nnet(y ~ ., data = bank, size = 5, maxit = 1000)
# remove the output variable
bank.ds = bank[-17]
# create IPPModel object
IPP.bank = IPPModel$new(XDS=bank.ds, PredFun=bank.NN,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=1000, XB.SamplingMethod="joint")
IPP.bank$ParaTable$clusteringMethod = "kmedoids"
# execute all tasks
IPP.bank$ExecuteAll()
IPP.bank$DrawIPP(centralized = TRUE, nc = 4)
IPP.bank$DrawFIN(threshold = 0.2, lay.out = igraph::layout.auto)
IPP.bank$WriteToExcel("output.xlsx")
library(modreg)
install.packages("modreg")
?loess
cars.lo <- loess(dist ~ speed, cars)
cars
cars.lo
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
seq(5, 30, 1)
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
cd = cars
cd = cars + cars$speed^2
cd
cd = cars
cd$newS = cars$speed^2
cd$newS
cd = cars + cars$speed^2
cd
cd = cars
cd
cd$newS = cars$speed^2
cd
cars.lo <- loess(dist ~ speed + newS, cd)
?loess
cd
cars.lo <- loess(dist ~ speed * newS, cd)
cars.lo <- loess(dist ~ speed + newS, cd)
?lr
DS = data("bank")
DS = bank
DS.month = rep(NA,nrow(DS))
DS.month[DS$month == "jan"] = "01"
DS.month[DS$month == "feb"] = "02"
DS.month[DS$month == "mar"] = "03"
DS.month[DS$month == "apr"] = "04"
DS.month[DS$month == "may"] = "05"
DS.month[DS$month == "jun"] = "06"
DS.month[DS$month == "jul"] = "07"
DS.month[DS$month == "aug"] = "08"
DS.month[DS$month == "sep"] = "09"
DS.month[DS$month == "oct"] = "10"
DS.month[DS$month == "nov"] = "11"
DS.month[DS$month == "dec"] = "12"
DS$month = NULL
colnamess = c("month",colnames(DS))
DS = data.frame(DS.month,DS)
colnames(DS) = colnamess
View(DS)
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[unsel,-17]
ytest = DS[unsel,17]
bank.ds = DS[-17] # remove the output variable
# build model
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
library(IPPModel)
library(igraph)
library(rminer)
# build model
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
optVal.NN.bank
optFun.NN.bank
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
# modify the clustering method to "kmedoids"
IPP.NN$ParaTable$clusteringMethod = "kmedoids"
IPP.NN$ParaTable$numK = 5
IPP.NN$ParaTable$L_A = 50
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
# draw impact pattern plots (IPP)
IPP.NN$DrawIPP(centralized = TRUE, nc = 2)
IPP.NN$ParaTable$clusteringMethod = "kmeans"
IPP.NN$ParaTable$numK = 5
IPP.NN$ParaTable$L_A = 50
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
IPP.NN$DrawIPP(centralized = TRUE, nc = 2)
library(IPPModel)
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.NN$ParaTable
del DS.month colnamess
library(IPPModel)
library(igraph)
library(rminer)
#------ BANK MARKETING DATA ------
data("bank")
DS = bank
DS.month = rep(NA,nrow(DS))
DS.month[DS$month == "jan"] = "01"
DS.month[DS$month == "feb"] = "02"
DS.month[DS$month == "mar"] = "03"
DS.month[DS$month == "apr"] = "04"
DS.month[DS$month == "may"] = "05"
DS.month[DS$month == "jun"] = "06"
DS.month[DS$month == "jul"] = "07"
DS.month[DS$month == "aug"] = "08"
DS.month[DS$month == "sep"] = "09"
DS.month[DS$month == "oct"] = "10"
DS.month[DS$month == "nov"] = "11"
DS.month[DS$month == "dec"] = "12"
DS$month = NULL
colnamess = c("month",colnames(DS))
DS = data.frame(DS.month,DS)
colnames(DS) = colnamess
del bank DS.month colnamess
data("bank")
DS = bank
DS.month = rep(NA,nrow(DS))
DS.month[DS$month == "jan"] = "01"
DS.month[DS$month == "feb"] = "02"
DS.month[DS$month == "mar"] = "03"
DS.month[DS$month == "apr"] = "04"
DS.month[DS$month == "may"] = "05"
DS.month[DS$month == "jun"] = "06"
DS.month[DS$month == "jul"] = "07"
DS.month[DS$month == "aug"] = "08"
DS.month[DS$month == "sep"] = "09"
DS.month[DS$month == "oct"] = "10"
DS.month[DS$month == "nov"] = "11"
DS.month[DS$month == "dec"] = "12"
DS$month = NULL
colnamess = c("month",colnames(DS))
DS = data.frame(DS.month,DS)
colnames(DS) = colnamess
rm(bank, DS.month, colnamess)
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[unsel,-17]
ytest = DS[unsel,17]
bank.ds = DS[-17] # remove the output variable
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
IPP.NN$DrawIPP(centralized = TRUE, nc = 2)
IPP.NN$ParaTable
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
sel
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
sel
optVal.NN.bank
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[unsel,-17]
ytest = DS[unsel,17]
bank.ds = DS[-17] # remove the output variable
#---------------- neural network -----------------
0.9394905
# build model
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
library(IPPModel)
library(igraph)
library(rminer)
#------ BANK MARKETING DATA ------
data("bank")
DS = bank
DS.month = rep(NA,nrow(DS))
DS.month[DS$month == "jan"] = "01"
DS.month[DS$month == "feb"] = "02"
DS.month[DS$month == "mar"] = "03"
DS.month[DS$month == "apr"] = "04"
DS.month[DS$month == "may"] = "05"
DS.month[DS$month == "jun"] = "06"
DS.month[DS$month == "jul"] = "07"
DS.month[DS$month == "aug"] = "08"
DS.month[DS$month == "sep"] = "09"
DS.month[DS$month == "oct"] = "10"
DS.month[DS$month == "nov"] = "11"
DS.month[DS$month == "dec"] = "12"
DS$month = NULL
colnamess = c("month",colnames(DS))
DS = data.frame(DS.month,DS)
colnames(DS) = colnamess
rm(bank, DS.month, colnamess)
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[sel,-17]
ytest = DS[sel,17]
bank.ds = DS[-17] # remove the output variable
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
optFun.NN.bank
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
s = 5
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
data("bank")
DS = bank
DS.month = rep(NA,nrow(DS))
DS.month[DS$month == "jan"] = "01"
DS.month[DS$month == "feb"] = "02"
DS.month[DS$month == "mar"] = "03"
DS.month[DS$month == "apr"] = "04"
DS.month[DS$month == "may"] = "05"
DS.month[DS$month == "jun"] = "06"
DS.month[DS$month == "jul"] = "07"
DS.month[DS$month == "aug"] = "08"
DS.month[DS$month == "sep"] = "09"
DS.month[DS$month == "oct"] = "10"
DS.month[DS$month == "nov"] = "11"
DS.month[DS$month == "dec"] = "12"
DS$month = NULL
colnamess = c("month",colnames(DS))
DS = data.frame(DS.month,DS)
colnames(DS) = colnamess
rm(bank, DS.month, colnamess)
set.seed(3)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[sel,-17]
ytest = DS[sel,17]
bank.ds = DS[-17] # remove the output variable
optVal.NN.bank = 0
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
s
temp = predict(fun,xtest)
xxx = predict(fun,xtest, type='class')
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
colnames(xd) = c("yes","no")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
ytest
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
View(xd)
colnames(xd) = c("yes","no")
View(xd)
auc = mmetric(y = ytest, x = xd,metric = "AUC")
set.seed(3)
# build model
library(nnet)
optVal.NN.bank = 0
for(s in 1:10){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
}
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
optVal.NN.bank
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
# draw impact pattern plots (IPP)
IPP.NN$DrawIPP(centralized = TRUE, nc = 2)
set.seed(8)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[sel,-17]
ytest = DS[sel,17]
bank.ds = DS[-17] # remove the output variable
#---------------- neural network -----------------
set.seed(3)
# build model
library(nnet)
optVal.NN.bank = 0
for(s in 5:5){
for(try in 1:5){
fun <- nnet(y ~ ., data = DS[unsel,], size = s, maxit = 1000)
temp = predict(fun,xtest)
xd = cbind(1-temp,temp)
colnames(xd) = c("no","yes")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.NN.bank){
optVal.NN.bank = auc
optFun.NN.bank = fun
}
}
} #0.8876617
rm(s, try, temp, auc, xd, sel, unsel, xtest, ytest, fun)
set.seed(8)
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.NN.bank,
ModelPackage="nnet", PredType="raw", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.NN$ParaTable$X_A = FALSE
IPP.NN$ParaTable["duration","X_A"] = TRUE
IPP.NN$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.NN$ExecuteAll()
# draw impact pattern plots (IPP)
IPP.NN$DrawIPP(centralized = TRUE, nc = 2)
set.seed(8)
sel = sample(1:nrow(bank),nrow(DS)/5,replace = FALSE)
unsel = (1:nrow(DS))[!(1:nrow(DS) %in% sel)]
xtest = DS[sel,-17]
ytest = DS[sel,17]
bank.ds = DS[-17] # remove the output variable
library(randomForest)
optVal.RF.bank = 0
for(s in 1:10){
fun <- randomForest(y ~ ., data = DS[unsel,], mtry = s,importance=TRUE,
na.action=na.omit)
xd = predict(fun,xtest,type="prob")
auc = mmetric(y = ytest, x = xd,metric = "AUC")
if(auc > optVal.RF.bank){
optVal.RF.bank = auc
optFun.RF.bank = fun
}
}
set.seed(8)
IPP.NN = IPPModel$new(XDS=bank.ds, PredFun=optFun.RF.bank,
ModelPackage="randomForest", PredType="prob", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.RF = IPPModel$new(XDS=bank.ds, PredFun=optFun.RF.bank,
ModelPackage="randomForest", PredType="prob", PredDim=1,
XB.Size=5000, XB.SamplingMethod="joint")
IPP.RF$ParaTable$X_A = FALSE
IPP.RF$ParaTable["duration","X_A"] = TRUE
IPP.RF$ParaTable["month","X_A"] = TRUE
# execute all tasks
IPP.RF$ExecuteAll()
# draw impact pattern plots (IPP)
IPP.RF$DrawIPP(centralized = TRUE, nc = 2)
